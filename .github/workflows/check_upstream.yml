name: Check Upstream Repositories

on:
  schedule:
    - cron: '0 * * * *' # 每小时检查一次
  workflow_dispatch:
    inputs:
      repository:
        description: '要检查的仓库 (all, eth-phishing-detect, scam-database)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - eth-phishing-detect
          - scam-database

jobs:
  check-eth-phishing-detect:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' && (github.event.inputs.repository == 'all' || github.event.inputs.repository == 'eth-phishing-detect')
    runs-on: ubuntu-latest
    steps:
      - name: Get latest commit from upstream
        id: upstream
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: commit } = await github.rest.repos.listCommits({
              owner: 'MetaMask',
              repo: 'eth-phishing-detect',
              per_page: 1
            });
            const latestCommitSha = commit[0].sha;
            core.setOutput("latest_commit_sha", latestCommitSha);

      - name: Restore cached upstream state
        id: cache
        uses: actions/cache@v3
        with:
          path: .eth-phishing-detect-state
          key: eth-phishing-detect-${{ steps.upstream.outputs.latest_commit_sha }}

      - name: Load previous upstream state
        id: restore
        run: |
          if [ -f .eth-phishing-detect-state ]; then
            PREVIOUS_STATE=$(cat .eth-phishing-detect-state)
            echo "PREVIOUS_STATE=$PREVIOUS_STATE" >> $GITHUB_ENV
          else
            echo "PREVIOUS_STATE=" >> $GITHUB_ENV
          fi

      - name: Check for changes
        id: check
        run: |
          CURRENT_STATE="${{ steps.upstream.outputs.latest_commit_sha }}"
          PREVIOUS_STATE="${{ env.PREVIOUS_STATE }}"

          echo "Current State: $CURRENT_STATE"
          echo "Previous State: $PREVIOUS_STATE"

          if [ "$CURRENT_STATE" != "$PREVIOUS_STATE" ]; then
            echo "$CURRENT_STATE" > .eth-phishing-detect-state
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Trigger sync workflow if changed
        if: steps.check.outputs.changed == 'true'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          event-type: eth_phishing_detect_updated

  check-scam-database:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' && (github.event.inputs.repository == 'all' || github.event.inputs.repository == 'scam-database')
    runs-on: ubuntu-latest
    steps:
      - name: Get latest commit from upstream
        id: upstream
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: commit } = await github.rest.repos.listCommits({
              owner: 'scamsniffer',
              repo: 'scam-database',
              per_page: 1
            });
            const latestCommitSha = commit[0].sha;
            core.setOutput("latest_commit_sha", latestCommitSha);

      - name: Restore cached upstream state
        id: cache
        uses: actions/cache@v3
        with:
          path: .scam-database-state
          key: scam-database-${{ steps.upstream.outputs.latest_commit_sha }}

      - name: Load previous upstream state
        id: restore
        run: |
          if [ -f .scam-database-state ]; then
            PREVIOUS_STATE=$(cat .scam-database-state)
            echo "PREVIOUS_STATE=$PREVIOUS_STATE" >> $GITHUB_ENV
          else
            echo "PREVIOUS_STATE=" >> $GITHUB_ENV
          fi

      - name: Check for changes
        id: check
        run: |
          CURRENT_STATE="${{ steps.upstream.outputs.latest_commit_sha }}"
          PREVIOUS_STATE="${{ env.PREVIOUS_STATE }}"

          echo "Current State: $CURRENT_STATE"
          echo "Previous State: $PREVIOUS_STATE"

          if [ "$CURRENT_STATE" != "$PREVIOUS_STATE" ]; then
            echo "$CURRENT_STATE" > .scam-database-state
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Trigger sync workflow if changed
        if: steps.check.outputs.changed == 'true'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          event-type: scam_database_upstream_updated